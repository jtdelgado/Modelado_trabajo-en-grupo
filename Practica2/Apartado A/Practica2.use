model Practica2

----------Clases-----------
class Clock
attributes
    now : Integer
end

class Coche < ActiveObject
attributes
    fechaMatriculacion : Integer
    --Este hay que actualizarlo en el apartado B
    kmRecorridos : Real
        derive : self.viaje->select(v | v.fechaLlegada <= self.clock.now).recorrido.numKm->sum()
    --Este hay que actualizarlo en el apartado B
    enGarantia : Boolean 
        derive: (self.clock.now - self.fechaMatriculacion) < 400 or 
            self.revision->exists(r | r.taller.oclIsTypeOf(TallerOficial) and 
                    (self.clock.now - r.fechaFin) <= 
                            r.taller.oclAsType(TallerOficial).tiempoGarantiaDias)
    --Este hay que actualizarlo en el apartado B
    -- probar que pasa cuando se hace un mantenimiento antes de los 400 dias
    necesitaMantenimiento : Boolean
        derive: if self.revision->select(r | r.tipoRevision = TipoRevision::Mantenimiento)->notEmpty() then
            (self.clock.now - self.revision->select(r | r.tipoRevision = TipoRevision::Mantenimiento)
                                            ->sortedBy(fechaFin)->last().fechaFin) > 100
        else
            (self.clock.now - self.fechaMatriculacion) > 400
        endif
end



class Viaje
attributes
    fechaSalida : Integer
    fechaLlegada : Integer
end

class Ciudad
attributes
    nombre : String
end

associationclass Recorrido  between
    Ciudad[1] role ciudadOrigen
    Ciudad[0..*] role ciudadDestino
    attributes
        numKm : Real
end

class Taller 
attributes
    nombre : String
end

class TallerOficial < Taller
attributes
    tiempoGarantiaDias : Integer 
end

enum TipoRevision {Mantenimiento, Averia}

class Revision
attributes
    fechaInicio : Integer
    fechaFin : Integer
    tipoRevision : TipoRevision
end 

abstract class ActiveObject
end

----------Fin de clases-----------

----------Asociaciones------------
association ViajeCoche between
    Coche[1] role cocheEnViaje
    Viaje[0..*] role viaje
end

association RevisionCoche between
    Coche[1] role cocheEnRevision
    Revision[0..*] role revision
end

association RevisionTaller between
    Taller[1] role taller
    Revision[0..*] role revision
end

association ViajeRecorrido between
    Viaje[0..*] role viajeRecorrido
    Recorrido[1] role recorrido
end

association CocheCiudad between
    Coche[0..*] role cocheEnCiudad
    Ciudad[0..1] role ciudad
end

association Time between
    Clock[1] role clock
    ActiveObject[*] role ao ordered
end

----------Composiciones------------

composition CiudadTaller between
    Ciudad[1] role localizacionTaller
    Taller[0..*] role taller
end

----------Invariantes------------ 
constraints
--En el apartado A solo tendremos una única insatncia del objeto clock 
--Para indicar esto crearemos una nueva invariante
context Clock
    inv unicoClock:
        Clock.allInstances()->size() = 1

context Recorrido
    inv DistanciaMinima:
        self.numKm > 5 

context Coche
    inv fechaMatriculacionValida:
        self.fechaMatriculacion >= 0 and self.fechaMatriculacion <> null

    --Este hay que actualizarlo en el apartado B
    inv tallerMismaCiudad:
        let revisiones: Sequence(Revision) = self.revision-> sortedBy(fechaFin) -> asSequence() in
        let hoy : Integer = self.clock.now in
        revisiones->forAll(r | 
            (r.fechaInicio <= hoy and hoy <= r.fechaFin) implies 
            r.taller.localizacionTaller = self.ciudad
        )
                            
    inv ciudadDestinoEsCiudadOrigenSiguiente:
        let viajesOrdenados : Sequence(Viaje) = self.viaje
                ->sortedBy(fechaSalida)->asSequence() in
        viajesOrdenados->forAll(v | 
            viajesOrdenados->indexOf(v) < viajesOrdenados->size() implies 
                v.recorrido.ciudadDestino = viajesOrdenados
                    ->at(viajesOrdenados->indexOf(v) + 1).recorrido.ciudadOrigen
        )
        -- ordenamos los viajes registrados de un coche por fecha de salida
        -- y comprobamos para todos los viajes que la siguiente ciudad de destino actual 
        -- es la ciudad de origen de la siguiente

    inv viajeDetrasDeOtro:
        let viajesOrdenados : Sequence(Viaje) = self.viaje
            ->sortedBy(fechaSalida)->asSequence() in
        viajesOrdenados->forAll(v | 
            viajesOrdenados->indexOf(v) < viajesOrdenados->size() implies 
            v.fechaLlegada <= viajesOrdenados
                    ->at(viajesOrdenados->indexOf(v) + 1).fechaSalida
        )
    -- Esta invariante comprueba que un si un viaje empieza el 1 y acaba el 2, 
    -- el siguiente viaje tiene que empezar el 3 y asi sucesivamente


    --Este hay que actualizarlo en el apartado B
    inv cocheViajandoOEnCiudad:
        let viajes : Sequence(Viaje) = self.viaje->sortedBy(fechaSalida)->asSequence() in
        let hoy : Integer = self.clock.now in
        if self.viaje->isEmpty() then
                -- si el coche no se encuentra en ningun viaje y no tiene ningun viaje pendiente
                -- la ciudad del coche tiene que estar definida
                not self.ciudad.oclIsUndefined()
        else
            if viajes->exists(v | v.fechaSalida <= hoy and hoy <= v.fechaLlegada) then
                -- Si el coche está en un viaje, su ciudad debe ser indefinida
                self.ciudad.oclIsUndefined()
            else
                if  not viajes->select(v | v.fechaSalida >= hoy)->isEmpty() then
                    -- Si el coche no tiene viajes realizados pero tiene viajes pendientes, 
                    -- su ciudad es la ciudad origen del primer viaje
                    viajes->select(v | v.fechaSalida >= hoy)->first().recorrido.ciudadOrigen = self.ciudad
                else
                    -- Si tiene viajes realizados, su ciudad debe coincidir con el destino del último viaje finalizado
                    viajes->select(v | v.fechaLlegada <= hoy)->last().recorrido.ciudadDestino = self.ciudad
                    
                endif
            endif
        endif
    
    inv unaRevisionALaVez:
        self.revision->forAll(r1,r2 | r1 <> r2 implies 
            (r1.fechaInicio <> r2.fechaInicio and r1.fechaFin <> r2.fechaFin) and
            not (r1.fechaInicio <= r2.fechaInicio and r2.fechaInicio <= r1.fechaFin) and
            not (r1.fechaInicio <= r2.fechaFin and r2.fechaFin <= r1.fechaFin)
        )

        
context Revision
    inv fechasRevisionValidas:
        ((self.fechaInicio <> null and self.fechaInicio>=0) and 
        (self.fechaFin <> null and self.fechaFin>=0)) and 
        (self.fechaInicio <= self.fechaFin)
        
    inv fechaRevisionPosteriorCoche:
        self.cocheEnRevision.fechaMatriculacion <= self.fechaInicio

context TallerOficial
    inv garantiaValida:
        self.tiempoGarantiaDias <> null and self.tiempoGarantiaDias > 0 

context Ciudad 
    inv solo1TallerOficial:
        self.taller->select(t|t.oclIsTypeOf(TallerOficial))->size()<=1

context Viaje
    inv fechasViajeValidas: 
        ((self.fechaSalida <> null and self.fechaSalida>=0) and 
        (self.fechaLlegada <> null and self.fechaLlegada>=0)) and 
        (self.fechaSalida <= self.fechaLlegada)
    

----------Fin invariantes------------
--PREGUNTAS QUE HAY QUE HACER AL PROFESOR
--1. ¿Hay que comprobar que las fechas sean positivas, no nulas y que sean razonables (inicio<fi)?
--2. ¿Hay que comprobar que la ciudad en la que se encuentre el coche 
--    es la misma que el destino del ultimo viaje realizado (inv CiudadAdecuada)?
--3. ¿Hay que hacer un state machine?