model Practica2

----------Clases-----------
class Clock
attributes
    now : Integer
    resolution : Integer init = 1
operations
    tick() 
      begin
        self.now:=self.now + self.resolution;
        for o in self.ao do 
            o.tick()
        end;
      end
      post TimePasses: self.now = self.now@pre + self.resolution
    run (n:Integer)
      begin
        for i in Sequence{1..n} do
          self.tick()
        end 
      end
  constraints
    inv PositiveResolution: self.resolution > 0
end

abstract class ActiveObject -- real-time objects 
  operations
    tick() 
    begin
   -- self. 
    
    end 
end

association Time between 
  Clock [1] role clock
  ActiveObject [*] role ao ordered
end

class Coche < ActiveObject
attributes
    fechaMatriculacion : Integer
    kmRecorridos : Integer
    kmAlDia : Integer -- APARTADO B
    enGarantia : Boolean 
        derive: (self.clock.now - self.fechaMatriculacion) < 400 or 
            self.revision->exists(r | r.taller.oclIsTypeOf(TallerOficial) and 
                    (self.clock.now - r.fechaFin) <= 
                            r.taller.oclAsType(TallerOficial).tiempoGarantiaDias)

    necesitaMantenimiento : Boolean
        derive : (self.clock.now - self.fechaMatriculacion) >= 400 or 
            (self.clock.now - self.revision
                        ->select(r | r.tipoRevision = TipoRevision::Mantenimiento)
                                    ->sortedBy(fechaFin)->last().fechaFin) >= 100

operations 
    tick()
        begin
            self.avanzar()
        end
    --Un coche comienza un viaje desde la ciudad en la que se encuentra. Esta operación debe 
    --recibir como parámetro el recorrido entre dos ciudades que debe realizar en su viaje.
    nuevoViaje(recorrido : Recorrido)
        begin
            
            declare v:Viaje;
            v.fechaSalida:=self.clock.now;
            v.kilometrosRecorridos:=recorrido.numKm;
            insert(self, v) into ViajeCoche;
            insert(v, recorrido) into ViajeRecorrido;
            
        end
        pre OrigenRecorridoCorrecto :( not self.ciudad.oclIsUndefined() and Recorrido.allInstances()->exists(r | r = recorrido) and self.ciudad = recorrido.ciudadOrigen)
        post CreadoViajeConFechaSalidaNow : (self.viaje->exists(v | v.recorrido = recorrido and v.fechaSalida = self.clock.now))

    avanzar()
        begin
            declare kmQueRecorreAlAvanzar : Integer, viajeActual : Viaje, kmRestantesViajeActual : Integer;
            
            if self.viaje -> exists(v | v.fechaLlegada.oclIsUndefined()) then --Hay  un invariante que comprueba que no haya más viajes en curso 

                viajeActual := self.viaje->sortedBy(v | v.fechaSalida)->last();
                kmRestantesViajeActual := viajeActual.recorrido.numKm - viajeActual.kilometrosRecorridos;

                --Como máximo recorre kmAlDia (↓)
                if kmRestantesViajeActual > self.kmAlDia then  
                    kmQueRecorreAlAvanzar := self.kmAlDia;
                else
                    kmQueRecorreAlAvanzar := kmRestantesViajeActual;
                    viajeActual.asignarFechaLlegada(self.clock.now);
                end;

                viajeActual.sumarKilometrosRecorridos(kmQueRecorreAlAvanzar);
                self.kmRecorridos := self.kmRecorridos + kmQueRecorreAlAvanzar;
                
            end;
            
        end
--        pre viajeEnCurso : self.viaje -> exists(v | v.fechaLlegada = null)
        post kilometrosActualizados: self.kmRecorridos = self.kmRecorridos@pre + kmQueRecorreAlAvanzar  
                                        
                                        -- if(kmRestantesViajeActual = kmQueRecorreAlAvanzar) then 
                                        --     viajeActual.fechaLlegada = self.clock.now endif
end



class Viaje
attributes
    fechaSalida : Integer
    fechaLlegada : Integer
    kilometrosRecorridos : Integer
operations
    sumarKilometrosRecorridos(km : Integer)
        begin
            self.kilometrosRecorridos := self.kilometrosRecorridos + km;
        end
    asignarFechaLlegada(llegada : Integer)
        begin
            self.fechaLlegada := llegada
        end
end

class Ciudad
attributes
    nombre : String
end

associationclass Recorrido  between
    Ciudad[1] role ciudadOrigen
    Ciudad[0..*] role ciudadDestino
    attributes
        numKm : Integer
end

class Taller 
attributes
    nombre : String
end

class TallerOficial < Taller
attributes
    tiempoGarantiaDias : Integer 
end

enum TipoRevision {Mantenimiento, Averia}

class Revision
attributes
    fechaInicio : Integer
    fechaFin : Integer
    tipoRevision : TipoRevision
end 

----------Fin de clases-----------

----------Asociaciones------------
association ViajeCoche between
    Coche[1] role cocheEnViaje
    Viaje[0..*] role viaje
end

association RevisionCoche between
    Coche[1] role cocheEnRevision
    Revision[0..*] role revision
end

association RevisionTaller between
    Taller[1] role taller
    Revision[0..*] role revision
end

association ViajeRecorrido between
    Viaje[0..*] role viajeRecorrido
    Recorrido[1] role recorrido
end

association CocheCiudad between
    Coche[0..*] role cocheEnCiudad
    Ciudad[0..1] role ciudad
end
----------Composiciones------------

composition CiudadTaller between
    Ciudad[1] role localizacionTaller
    Taller[0..*] role taller
end

----------Invariantes------------ 
constraints
--En el apartado A solo tendremos una única insatncia del objeto clock 
--Para indicar esto crearemos una nueva invariante
context Clock
    inv unicoClock:
        Clock.allInstances()->size() = 1

context Recorrido
    inv DistanciaMinima:
        self.numKm > 5 

context Coche
    inv fechaMatriculacionValida:
        self.fechaMatriculacion >= 0 and self.fechaMatriculacion <> null

    inv tallerMismaCiudad:
        let revisiones: Sequence(Revision) = self.revision-> sortedBy(fechaFin) -> asSequence() in
        let hoy : Integer = self.clock.now in
        revisiones->forAll(r | 
            (r.fechaInicio <= hoy and hoy <= r.fechaFin) implies 
            r.taller.localizacionTaller = self.ciudad
        )
                            
    inv ciudadDestinoEsCiudadOrigenSiguiente:
        let viajesOrdenados : Sequence(Viaje) = self.viaje
                ->sortedBy(fechaSalida)->asSequence() in
        viajesOrdenados->forAll(v | 
            viajesOrdenados->indexOf(v) < viajesOrdenados->size() implies 
                v.recorrido.ciudadDestino = viajesOrdenados
                    ->at(viajesOrdenados->indexOf(v) + 1).recorrido.ciudadOrigen
        )
        -- ordenamos los viajes registrados de un coche por fecha de salida
        -- y comprobamos para todos los viajes que la siguiente ciudad de destino actual 
        -- es la ciudad de origen de la siguiente

    inv viajeDetrasDeOtro:
        let viajesOrdenados : Sequence(Viaje) = self.viaje
            ->sortedBy(fechaSalida)->asSequence() in
        viajesOrdenados->forAll(v | 
            viajesOrdenados->indexOf(v) < viajesOrdenados->size() implies 
            v.fechaLlegada <= viajesOrdenados
                    ->at(viajesOrdenados->indexOf(v) + 1).fechaSalida
        )
    -- Esta invariante comprueba que un si un viaje empieza el 1 y acaba el 2, 
    -- el siguiente viaje tiene que empezar el 3 y asi sucesivamente
    
    -- En el siguiente apartado esta restriccion habria que modificarla ya que,
    -- al modelar el paso del tiempo, no sabemos cuando va a llegar (enunciado)

    inv cocheViajandoOEnCiudad:
        let viajes : Sequence(Viaje) = self.viaje
            ->sortedBy(fechaSalida)->asSequence() in
        let hoy : Integer = self.clock.now in
        viajes->forAll(v | 
            (v.fechaSalida <= hoy and hoy <= v.fechaLlegada) implies 
            self.ciudad.oclIsUndefined() 
        )
    -- --------------------------IMPORTANTE (otro invariante)--------------------------------
    -- (Punto 11 enunciado)
    -- Comprobar que el coche esta en la ciudad adecuada, es decir, si now es antes del viaje
    -- entonces la ciudad en la que se encuentra el coche es la ciudad de origen del viaje
    -- si now es despues del viaje entonces la ciudad en la que se encuentra el coche es la 
    -- ciudad de destino del viaje


    inv CiudadAdecuada:
        let viajes : Sequence(Viaje) = self.viaje
            ->sortedBy(fechaSalida)->asSequence() in
        let hoy : Integer = self.clock.now in
        viajes->select(v | v.fechaLlegada <= hoy)->last().recorrido.ciudadDestino = self.ciudad
    
    inv unaRevisionALaVez:
        self.revision->forAll(r1,r2 | r1 <> r2 implies 
            (r1.fechaInicio <> r2.fechaInicio and r1.fechaFin <> r2.fechaFin) and
            not (r1.fechaInicio <= r2.fechaInicio and r2.fechaInicio <= r1.fechaFin) and
            not (r1.fechaInicio <= r2.fechaFin and r2.fechaFin <= r1.fechaFin)
        )

        
context Revision
    inv fechasRevisionValidas:
        ((self.fechaInicio <> null and self.fechaInicio>=0) and 
        (self.fechaFin <> null and self.fechaFin>=0)) and 
        (self.fechaInicio <= self.fechaFin)
        
    inv fechaRevisionPosteriorCoche:
        self.cocheEnRevision.fechaMatriculacion <= self.fechaInicio

context TallerOficial
    inv garantiaValida:
        self.tiempoGarantiaDias <> null and self.tiempoGarantiaDias > 0 

context Ciudad 
    inv solo1TallerOficial:
        self.taller->select(t|t.oclIsTypeOf(TallerOficial))->size()<=1

context Viaje
    inv fechasViajeValidas: 
        ((self.fechaSalida <> null and self.fechaSalida>=0) and 
        (self.fechaLlegada <> null and self.fechaLlegada>=0)) and 
        (self.fechaSalida <= self.fechaLlegada)


----------Fin invariantes------------
--PREGUNTAS QUE HAY QUE HACER AL PROFESOR
--1. ¿Hay que comprobar que las fechas sean positivas, no nulas y que sean razonables (inicio<fi)?
--2. ¿Hay que comprobar que la ciudad en la que se encuentre el coche 
--    es la misma que el destino del ultimo viaje realizado (inv CiudadAdecuada)?
--3. ¿Hay que hacer un state machine?