model Practica2

----------Clases-----------
class Clock
attributes
    now : Integer
end

class Coche 
attributes
    fechaMatriculacion : Integer
    kmRecorridos : Real
        derive : self.viaje.recorrido.numKm->sum()
    kmAlDia : Real
    enGarantia : Boolean
        derive : (Clock.allInstances()->any(true).now - self.fechaMatriculacion) < 400
    necesitaMantenimiento : Boolean
        derive : (Clock.allInstances()->any(true).now - self.fechaMatriculacion) >= 400 or 
            (Clock.allInstances()->any(true).now - self.revision->select(r | r.tipoRevision = TipoRevision::Mantenimiento)->sortedBy(fechaFin)->last().fechaFin) >= 100
end

class Viaje
attributes
    fechaSalida : Integer
    fechaLlegada : Integer
end

class Ciudad
attributes
    nombre : String
end

associationclass Recorrido  between
    Ciudad[1] role ciudadOrigen
    Ciudad[0..*] role ciudadDestino
    attributes
        numKm : Real
end

class Taller 
attributes
    nombre : String
end

class TallerOficial< Taller
attributes
    tiempoGarantiaDias : Integer 
end

enum TipoRevision {Mantenimiento, Averia}

class Revision
attributes
    fechaInicio : Integer
    fechaFin : Integer
    tipoRevision : TipoRevision
end 

----------Fin de clases-----------

----------Asociaciones------------
association ViajeCoche between
    Coche[1] role cocheEnViaje
    Viaje[0..*] role viaje
end

association RevisionCoche between
    Coche[1] role cocheEnRevision
    Revision[0..*] role revision
end

association RevisionTaller between
    Taller[1] role taller
    Revision[0..*] role revision
end

association ViajeRecorrido between
    Viaje[0..*] role viajeRecorrido
    Recorrido[1] role recorrido
end

association CocheCiudad between
    Coche[0..*] role cocheEnCiudad
    Ciudad[0..1] role ciudad
end

----------Composiciones------------

composition CiudadTaller between
    Ciudad[1] role localizacionTaller
    Taller[0..*] role taller
end

----------Invariantes------------ ESTO NO ESTA NI TERMINADO NI ASEGURO QUE SEA CORRECTO
constraints
--En el apartado A solo tendremos una Ãºnica insatncia del objeto clock 
--Para indicar esto crearemos una nueva invariante
context Clock
    inv unicoClock:
        Clock.allInstances()->size() = 1

context Recorrido
    inv DistanciaMinima:
        self.numKm > 5 

context Coche
    inv fechaMatriculacionPositiva:
        self.fechaMatriculacion >= 0

    inv tallerMismaCiudad:
        let ultimaRevision: Revision = self.revision -> asSequence() ->first() in
        let hoy : Integer = Clock.allInstances()->any(true).now in
        (ultimaRevision.fechaInicio <= hoy and ultimaRevision.fechaFin >= hoy) 
        implies ultimaRevision.taller.localizacionTaller = self.ciudad 

    inv ciudadDestinoEsCiudadOrigenSiguiente:
        let viajesOrdenados : Sequence(Viaje) = self.viaje
                ->sortedBy(fechaSalida)->asSequence() in
        viajesOrdenados->forAll(v | 
            viajesOrdenados->indexOf(v) < viajesOrdenados->size() implies 
                v.recorrido.ciudadDestino = viajesOrdenados
                    ->at(viajesOrdenados->indexOf(v) + 1).recorrido.ciudadOrigen
        )
        -- ordenamos los viajes registrados de un coche por fecha de salida
        -- y comprobamos para todos los viajes que la siguiente ciudad de destino actual 
        -- es la ciudad de origen de la siguiente

        
context Revision
    inv fechasRevisionNoNulas:
        self.fechaInicio <> -1 and self.fechaFin <> -1
    
context Revision
    inv fechaInicioRevisionPositiva:
        self.fechaInicio >= 0

    inv fechaFinRevisionPosteriorInicio:
        self.fechaFin >= fechaInicio
        
    inv fechaRevisionPosteriorCoche:
        self.cocheEnRevision.fechaMatriculacion <= self.fechaInicio

context TallerOficial
    inv garantiaPositiva:
        self.tiempoGarantiaDias > 0

context Ciudad 
    inv solo1TallerOficial:
        self.taller->select(t|t.oclIsTypeOf(TallerOficial))->size()<=1

context Viaje
    inv viajeDetrasDeOtro:
        let viajesOrdenados : Sequence(Viaje) = Viaje.allInstances()->sortedBy(fechaSalida)->asSequence() in
        viajesOrdenados->forAll(v | 
            viajesOrdenados->indexOf(v) < viajesOrdenados->size() implies 
            v.fechaLlegada < viajesOrdenados->at(viajesOrdenados->indexOf(v) + 1).fechaSalida
        )
    -- Esta invariante comprueba que un si un viaje empieza el 1 y acaba el 2, 
    -- el siguiente viaje tiene que empezar el 3 y asi sucesivamente
    
    -- En el siguiente apartado esta restriccion habria que modificarla ya que,
    -- al modelar el paso del tiempo, no sabemos cuando va a llegar (enunciado)

----------Fin invariantes------------
