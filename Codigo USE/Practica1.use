model Practica1

----------Clases-----------
class Avion
attributes
    num_kilometros : Integer --Hace falta hacerla (variable derivada)
            derive : self.vuelos.num_kilometros -> sum()
    num_vuelos : Integer --Hace falta hacerla (variable derivada)
            derive : self.vuelos -> size()
end

associationclass Contrato between
    Avion[0..*] role avion
    Aerolinea[1..*] role aerolinea
attributes
    precio_mes : Real
    num_mes : Integer
    precio_total : Real 
            derive : self.precio_mes * self.num_mes
end

class Aerolinea
attributes
    nombre : String
end

class Aeropuerto
end

class Vuelo
attributes
    identificador : String
    num_kilometros : Integer
end

class Ciudad
attributes 
    nombre : String
end

class Persona
attributes
    nombre : String
    edad : Integer
end

class Piloto < Persona
attributes
    num_kilometros : Integer derive :
        let totalK: Set(Vuelo) = 
            self.vuelosP -> union(self.vuelosS) in
            totalK -> collect(v |v.num_kilometros)-> sum()
    piloto_pro : Boolean
       derive : (self.vuelosS ->size() >= 3) and (self.vuelosP -> size() >=2) --------------FALTA POR PONERLO CUANDO SE HAGA LAS ASOCIACIONES
end

class Pasajero < Persona
end

class Almacen
attributes
    capacidad_max : Integer
end

class Hangar < Almacen
end

class Desguace < Almacen
end


---------Fin de Clases--------

----------Asociaciones---------
association vuelos_avion between
    Vuelo [0..*] role vuelos
    Avion [1] role avion
end

association avion_volando between
    Vuelo [0..1] role vueloEnCurso
    Avion [1] role avionEnVuelo
end

association vueloPilotoPrincipal between
    Vuelo [0..*] role vuelosP
    Piloto [1] role pilotoP
end

association vueloPilotoSecundario between
    Vuelo [0..*] role vuelosS
    Piloto [0..1] role pilotoS
end

association vueloPasajero between
    Vuelo [0..1] role vuelos
    Pasajero [0..*] role pasajeros
end

association aeropuertoCiudad between
    Aeropuerto [0..1] role aeropuertos
    Ciudad [1] role ciudad
end

association aeropuertoHangar between
    Aeropuerto [1] role aeropuerto
    Hangar [1..*] role hangares
end

association aeropuertoDesguace between
    Aeropuerto [1] role aeropuerto
    Desguace [0..1] role desguace
end

association avionDesguace between
    Avion [0..*] role aviones
    Desguace [0..1] role avionRelegado
end

association avionHangar between
    Avion [0..*] role aviones
    Hangar [0..1] role avionEstacionado
end

----------Fin Asociaciones-----

----------Invariantes----------
constraints

context Aerolinea
    inv AerolineaNombreUnico:
        Aerolinea.allInstances() -> forAll(a1, a2 | a1 <> a2 implies a1.nombre <> a2.nombre)
                        --a1 <> a2 indica que a1 y a2 son distintos y
                        --a1.nombre <> a2.nombre establece que el nombre de las aerolineas no puede ser igual
                        --La lectura literal seria: si a1 es distinto de a2 entonces a1.nombre es distinto de a2.nombre

context Vuelo
    inv IdCadaVueloUnico:
        Vuelo.allInstances() -> forAll(v1,v2|  v1 <> v2 implies v1.identificador <> v2.identificador)
                        -- Si el objeto no es el mismo esto implica que los identificadores son distintos

    inv PilotosDistintos:
        self.pilotoS ->notEmpty() implies self.pilotoP <> self.pilotoS

context Desguace 
    inv AvionEstaDesguace:
        self.aviones -> forAll(a | a.num_vuelos>=2) --Para comprobar el invariante supondremos que el avion debe de haber superado 2

    inv CapMaxDeswace:
        self.aviones -> size()<= self.capacidad_max

context Hangar
    inv CapMaxHangar: 
        self.aviones -> size()<= self.capacidad_max
 
context Piloto
    inv MaxAerolineasPorPiloto:
        let totalVuelos : Set(Vuelo) = self.vuelosP -> union(self.vuelosS) in
        let totalAviones : Bag(Avion) = totalVuelos.avion in
        totalAviones.aerolinea ->asSet()->size()<=2

context Avion
    inv AvionEstadoObligatorio:
    (self.vueloEnCurso->size()) + (self.avionRelegado -> size()) + (self.avionEstacionado -> size()) =1
    
----------Fin Invariantes------